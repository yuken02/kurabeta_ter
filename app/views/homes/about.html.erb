<div class="container">
  <div class="row my-3 justify-content-center">
    <%= render 'layouts/main_head' %>
  </div>

  <div class="wave row">
    <canvas class="col-12" id="waveCanvas"></canvas>
  </div>

  <div class="row justify-content-center">
    <div class="col-md-10">
      <div class="text-center mb-md-5">
        <p>
          気になるキーワードの1週間分のツイート数を折線グラフとして見れるサイトです。<br/>
          ログインすることでキーワードを登録し、登録したキーワードを比較することもできます。
        </p>
        <p>
          プログラミング言語をTwitterで調べる時にそれぞれの言語別での情報量の違いや、その時々のトレンドを調べた際にぱっと見で分かりづらいなと感じていました。<br/>
          また、同じものを指していても別のワードでツイートされることも多く、どれが多く使われているか分かり難くもありました。<br/>
          比較したいワードを折れ線グラフで表示できるようになれば、それらが見やすく便利だなと思いこのサイトを作成しました。
        </p>
        <p>
          無料の似たサービスもありますが、このサイトでは複数のワードを1つのグラフで見比べることができます。
        </p>
      </div>
    </div>
  </div>
</div>


<script>
  var unit = 100,
  canvasList, // キャンバスの配列
  info = {}, // 全キャンバス共通の描画情報
  colorList; // 各キャンバスの色情報

  function init() {
    info.seconds = 0;
    info.t = 0;
    canvasList = [];
    colorList = [];

    // canvas色指定
    canvasList.push(document.getElementById("waveCanvas"));
    colorList.push(['#43c0e4']);

    // 各キャンバスの初期化
    for(var canvasIndex in canvasList) {
      var canvas = canvasList[canvasIndex];
      canvas.width = document.documentElement.clientWidth; //Canvasのwidthをウィンドウの幅に合わせる
      canvas.height = 200;//波の高さ
      canvas.contextCache = canvas.getContext("2d");
    }
    // 共通の更新処理呼び出し
    update();
  }

  function update() {
    for(var canvasIndex in canvasList) {
      var canvas = canvasList[canvasIndex];
      // 各キャンバスの描画
      draw(canvas, colorList[canvasIndex]);
    }
    // 共通の描画情報の更新
    info.seconds = info.seconds + .014;
    info.t = info.seconds*Math.PI;
    // 自身の再起呼び出し
    setTimeout(update, 35);
  }

  /** アニメーション function **/
  function draw(canvas, color) {
    // 対象のcanvasのコンテキストを取得
    var context = canvas.contextCache;
    // キャンバスの描画をクリア
    context.clearRect(0, 0, canvas.width, canvas.height);

    //波を描画 drawWave(canvas, color[数字（波の数を0から数えて指定）], 透過, 波の幅のzoom,波の開始位置の遅れ )
    drawWave(canvas, color[0], 0.8, 3, 0);
    drawWave(canvas, color[1], 0.5, 4, 0);
    drawWave(canvas, color[2], 0.3, 1.6, 0);
    drawWave(canvas, color[3], 0.2, 3, 100);
    drawWave(canvas, color[4], 0.8, 2, 0);
  }

  /** 波を描画, drawWave(色, 不透明度, 波の幅のzoom, 波の開始位置の遅れ) **/
  function drawWave(canvas, color, alpha, zoom, delay) {
    var context = canvas.contextCache;
    context.strokeStyle = color;//線の色
    context.lineWidth = 1;//線の幅
    context.globalAlpha = alpha;
    context.beginPath(); //パスの開始
    drawSine(canvas, info.t / 0.5, zoom, delay);
    context.stroke(); //線
  }

  /** drawSine(時間, 波の幅のzoom, 波の開始位置の遅れ) **/
  function drawSine(canvas, t, zoom, delay) {
    var xAxis = Math.floor(canvas.height/2);
    var yAxis = 0;
    var context = canvas.contextCache;
    var x = t; //時間を横の位置とする
    var y = Math.sin(x)/zoom;
    context.moveTo(yAxis, unit*y+xAxis); //スタート位置にパスを置く

    // Loop to draw segments (横幅の分、波を描画)
    for (i = yAxis; i <= canvas.width + 10; i += 10) {
      x = t+(-yAxis+i)/unit/zoom;
      y = Math.sin(x - delay)/3;
      context.lineTo(i, unit*y+xAxis);
    }
  }

  init();
</script>